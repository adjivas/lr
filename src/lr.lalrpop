use util;

grammar;

pub Screen: util::Screen = {
    <start:Alphanum?> <xy:XY> <end:Screen?> => {
      // abcdefghijklmnop<^[[1;1Haaaaa
      // abcdefghijklmnop<^[[1;1HAaaaa
      let mut start = start.unwrap_or_default();
      let (x, y) = xy;

      start.goto(x, y);
      if let Some(end) = end {
        start.clone_from(&end);
      }
      start
    },
    Alphanum,
};

Alphanum: util::Screen = Alphanumbytes => util::Screen::new(<>);

Alphanumbytes: Vec<u8> = {
      <a:Num> <b:Alpha> <c:Alphanumbytes?> => {
        let mut v = vec![];

        v.extend(a.bytes());
        v.extend(b.bytes());
        if let Some(end) = c {
          v.extend(end);
        }
        v
      },
      <a:Alpha> <b:Num> <c:Alphanumbytes?> => {
        let mut v = vec![];

        v.extend(a.bytes());
        v.extend(b.bytes());
        if let Some(end) = c {
          v.extend(end);
        }
        v
      },
      Num => <>.bytes().collect(),
      Alpha => <>.bytes().collect(),
};

XY: (u64, u64) = "<^[[" <x:Num> ";" <y:Num> "H"? => (x.parse().unwrap(), y.parse().unwrap());

Alpha = r"[\x40-\xffff]+";

Num = r"[\x30-\x39]+";
