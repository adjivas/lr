use lexer;
use ast;

use std::str::FromStr;

use lexer::{Tok,Lexer,LexicalError};
use lalrpop_util::ParseError;

grammar;

pub Program = <Statement*>;

Statement: ast::Stmt = {
    <l: @L> Statement "/" =>? Err(ParseError::User { error: LexicalError::Other2(l) }),
    "+" => ast::Stmt::Add,
    "\t" "\n" => ast::Stmt::Return,
    "\n" "\n" => ast::Stmt::Exit,
//    <l: @L> <e: !> <r: @R> =>? Err(ParseError::User { error: LexicalError::Other2(l) }),
};

extern {
    type Location = lexer::Pos;
    type Error = lexer::LexicalError;

    enum lexer::Tok {
        "/" => lexer::Tok::Div,
        "+" => lexer::Tok::Add,
        "\t" => lexer::Tok::Tab,
        "\n" => lexer::Tok::Linefeed,
    }
}
